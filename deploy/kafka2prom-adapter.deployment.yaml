apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka2prom-adapter
  name: kafka2prom-adapter
  namespace: kube-system
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: kafka2prom-adapter
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kafka2prom-adapter
    spec:
      containers:
        - command:
            - kafka2prom-adapter
          args:
            - --kafka-broker-list
            - "KAFKA-BROKER-LIST"
            - --kafka-topic
            - "your_prometheus_remote_write_topic"
            - --kafka-consumer-group-id
            - "KAFKA-CONSUMER-GROUP-ID"
            - --remote-write-endpoint
            - "REMOTE-WRITE-ENDPOINT"
            - --remote-write-batch-size
            - "200"
            - --consumer-instance-mode
            - multiple
          image: YOUR_REGISTRY_ADDR/kafka2prom-adapter:v0.0.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
          name: kafka2prom-adapter
          resources:
            limits:
              cpu: 4
              memory: 2Gi
            requests:
              cpu: 1
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
--- 
apiVersion: v1
kind: Service
metadata:
  name: kafka2prom-adapter
  namespace: kube-system
  labels:
    name: kafka2prom-adapter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/scheme: "http"
    prometheus.io/port: "8081"
spec:
  selector:
    app: kafka2prom-adapter
  ports:
  - name: http
    port: 8081
    protocol: TCP
    targetPort: 8081